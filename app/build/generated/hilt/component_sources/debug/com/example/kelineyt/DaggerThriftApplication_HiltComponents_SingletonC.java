// Generated by Dagger (https://dagger.dev).
package com.example.kelineyt;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.kelineyt.activities.LoginRegisterActivity;
import com.example.kelineyt.activities.ShoppingActivity;
import com.example.kelineyt.di.AppModule;
import com.example.kelineyt.di.AppModule_ProvideFirebaseAuthFactory;
import com.example.kelineyt.di.AppModule_ProvideFirebaseCommonFactory;
import com.example.kelineyt.di.AppModule_ProvideFirebaseFirestoreDatabaseFactory;
import com.example.kelineyt.di.AppModule_ProvideIntroductionSPFactory;
import com.example.kelineyt.di.AppModule_ProvideStorageFactory;
import com.example.kelineyt.firebase.FirebaseCommon;
import com.example.kelineyt.fragments.categories.AccessoryFragment;
import com.example.kelineyt.fragments.categories.AccessoryFragment_MembersInjector;
import com.example.kelineyt.fragments.categories.ChairFragment;
import com.example.kelineyt.fragments.categories.ChairFragment_MembersInjector;
import com.example.kelineyt.fragments.categories.CupboardFragment;
import com.example.kelineyt.fragments.categories.CupboardFragment_MembersInjector;
import com.example.kelineyt.fragments.categories.FurnitureFragment;
import com.example.kelineyt.fragments.categories.FurnitureFragment_MembersInjector;
import com.example.kelineyt.fragments.categories.MainCategoryFragment;
import com.example.kelineyt.fragments.categories.TableFragment;
import com.example.kelineyt.fragments.categories.TableFragment_MembersInjector;
import com.example.kelineyt.fragments.lognRegister.IntroductionFragment;
import com.example.kelineyt.fragments.lognRegister.LoginFragment;
import com.example.kelineyt.fragments.lognRegister.RegisterFragment;
import com.example.kelineyt.fragments.settings.AllOrdersFragment;
import com.example.kelineyt.fragments.settings.UserAccountFragment;
import com.example.kelineyt.fragments.shopping.AddressFragment;
import com.example.kelineyt.fragments.shopping.BillingFragment;
import com.example.kelineyt.fragments.shopping.ProductDetailsFragment;
import com.example.kelineyt.fragments.shopping.ProfileFragment;
import com.example.kelineyt.viewmodel.AddressViewModel;
import com.example.kelineyt.viewmodel.AddressViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.kelineyt.viewmodel.AllOrdersViewModel;
import com.example.kelineyt.viewmodel.AllOrdersViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.kelineyt.viewmodel.BillingViewModel;
import com.example.kelineyt.viewmodel.BillingViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.kelineyt.viewmodel.CartViewModel;
import com.example.kelineyt.viewmodel.CartViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.kelineyt.viewmodel.DetailsViewModel;
import com.example.kelineyt.viewmodel.DetailsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.kelineyt.viewmodel.IntroductionViewModel;
import com.example.kelineyt.viewmodel.IntroductionViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.kelineyt.viewmodel.LoginViewModel;
import com.example.kelineyt.viewmodel.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.kelineyt.viewmodel.MainCategoryViewModel;
import com.example.kelineyt.viewmodel.MainCategoryViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.kelineyt.viewmodel.OrderViewModel;
import com.example.kelineyt.viewmodel.OrderViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.kelineyt.viewmodel.ProfileViewModel;
import com.example.kelineyt.viewmodel.ProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.kelineyt.viewmodel.RegisterViewModel;
import com.example.kelineyt.viewmodel.RegisterViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.kelineyt.viewmodel.UserAccountViewModel;
import com.example.kelineyt.viewmodel.UserAccountViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.kelineyt.viewmodel.UserBookedViewModel;
import com.example.kelineyt.viewmodel.UserBookedViewModel_HiltModules_KeyModule_ProvideFactory;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.storage.StorageReference;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerThriftApplication_HiltComponents_SingletonC extends ThriftApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerThriftApplication_HiltComponents_SingletonC singletonC = this;

  private Provider<FirebaseFirestore> provideFirebaseFirestoreDatabaseProvider;

  private Provider<FirebaseAuth> provideFirebaseAuthProvider;

  private Provider<FirebaseCommon> provideFirebaseCommonProvider;

  private Provider<StorageReference> provideStorageProvider;

  private DaggerThriftApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    initialize(applicationContextModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private SharedPreferences sharedPreferences() {
    return AppModule_ProvideIntroductionSPFactory.provideIntroductionSP(ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam) {
    this.provideFirebaseFirestoreDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<FirebaseFirestore>(singletonC, 0));
    this.provideFirebaseAuthProvider = DoubleCheck.provider(new SwitchingProvider<FirebaseAuth>(singletonC, 1));
    this.provideFirebaseCommonProvider = DoubleCheck.provider(new SwitchingProvider<FirebaseCommon>(singletonC, 2));
    this.provideStorageProvider = DoubleCheck.provider(new SwitchingProvider<StorageReference>(singletonC, 3));
  }

  @Override
  public void injectThriftApplication(ThriftApplication arg0) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder appModule(AppModule appModule) {
      Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public ThriftApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerThriftApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements ThriftApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerThriftApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ThriftApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements ThriftApplication_HiltComponents.ActivityC.Builder {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerThriftApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public ThriftApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements ThriftApplication_HiltComponents.FragmentC.Builder {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerThriftApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public ThriftApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements ThriftApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerThriftApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public ThriftApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements ThriftApplication_HiltComponents.ViewC.Builder {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerThriftApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public ThriftApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements ThriftApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerThriftApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ThriftApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements ThriftApplication_HiltComponents.ServiceC.Builder {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerThriftApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public ThriftApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends ThriftApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerThriftApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends ThriftApplication_HiltComponents.FragmentC {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerThriftApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectAccessoryFragment(AccessoryFragment arg0) {
      injectAccessoryFragment2(arg0);
    }

    @Override
    public void injectChairFragment(ChairFragment arg0) {
      injectChairFragment2(arg0);
    }

    @Override
    public void injectCupboardFragment(CupboardFragment arg0) {
      injectCupboardFragment2(arg0);
    }

    @Override
    public void injectFurnitureFragment(FurnitureFragment arg0) {
      injectFurnitureFragment2(arg0);
    }

    @Override
    public void injectMainCategoryFragment(MainCategoryFragment arg0) {
    }

    @Override
    public void injectTableFragment(TableFragment arg0) {
      injectTableFragment2(arg0);
    }

    @Override
    public void injectIntroductionFragment(IntroductionFragment arg0) {
    }

    @Override
    public void injectLoginFragment(LoginFragment arg0) {
    }

    @Override
    public void injectRegisterFragment(RegisterFragment arg0) {
    }

    @Override
    public void injectAllOrdersFragment(AllOrdersFragment arg0) {
    }

    @Override
    public void injectUserAccountFragment(UserAccountFragment arg0) {
    }

    @Override
    public void injectAddressFragment(AddressFragment arg0) {
    }

    @Override
    public void injectBillingFragment(BillingFragment arg0) {
    }

    @Override
    public void injectProductDetailsFragment(ProductDetailsFragment arg0) {
    }

    @Override
    public void injectProfileFragment(ProfileFragment arg0) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    @CanIgnoreReturnValue
    private AccessoryFragment injectAccessoryFragment2(AccessoryFragment instance) {
      AccessoryFragment_MembersInjector.injectFirestore(instance, singletonC.provideFirebaseFirestoreDatabaseProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private ChairFragment injectChairFragment2(ChairFragment instance) {
      ChairFragment_MembersInjector.injectFirestore(instance, singletonC.provideFirebaseFirestoreDatabaseProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private CupboardFragment injectCupboardFragment2(CupboardFragment instance) {
      CupboardFragment_MembersInjector.injectFirestore(instance, singletonC.provideFirebaseFirestoreDatabaseProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private FurnitureFragment injectFurnitureFragment2(FurnitureFragment instance) {
      FurnitureFragment_MembersInjector.injectFirestore(instance, singletonC.provideFirebaseFirestoreDatabaseProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private TableFragment injectTableFragment2(TableFragment instance) {
      TableFragment_MembersInjector.injectFirestore(instance, singletonC.provideFirebaseFirestoreDatabaseProvider.get());
      return instance;
    }
  }

  private static final class ViewCImpl extends ThriftApplication_HiltComponents.ViewC {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerThriftApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends ThriftApplication_HiltComponents.ActivityC {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerThriftApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectLoginRegisterActivity(LoginRegisterActivity arg0) {
    }

    @Override
    public void injectShoppingActivity(ShoppingActivity arg0) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return ImmutableSet.<String>of(AddressViewModel_HiltModules_KeyModule_ProvideFactory.provide(), AllOrdersViewModel_HiltModules_KeyModule_ProvideFactory.provide(), BillingViewModel_HiltModules_KeyModule_ProvideFactory.provide(), CartViewModel_HiltModules_KeyModule_ProvideFactory.provide(), DetailsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), IntroductionViewModel_HiltModules_KeyModule_ProvideFactory.provide(), LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide(), MainCategoryViewModel_HiltModules_KeyModule_ProvideFactory.provide(), OrderViewModel_HiltModules_KeyModule_ProvideFactory.provide(), ProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide(), RegisterViewModel_HiltModules_KeyModule_ProvideFactory.provide(), UserAccountViewModel_HiltModules_KeyModule_ProvideFactory.provide(), UserBookedViewModel_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends ThriftApplication_HiltComponents.ViewModelC {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AddressViewModel> addressViewModelProvider;

    private Provider<AllOrdersViewModel> allOrdersViewModelProvider;

    private Provider<BillingViewModel> billingViewModelProvider;

    private Provider<CartViewModel> cartViewModelProvider;

    private Provider<DetailsViewModel> detailsViewModelProvider;

    private Provider<IntroductionViewModel> introductionViewModelProvider;

    private Provider<LoginViewModel> loginViewModelProvider;

    private Provider<MainCategoryViewModel> mainCategoryViewModelProvider;

    private Provider<OrderViewModel> orderViewModelProvider;

    private Provider<ProfileViewModel> profileViewModelProvider;

    private Provider<RegisterViewModel> registerViewModelProvider;

    private Provider<UserAccountViewModel> userAccountViewModelProvider;

    private Provider<UserBookedViewModel> userBookedViewModelProvider;

    private ViewModelCImpl(DaggerThriftApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.addressViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.allOrdersViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.billingViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.cartViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
      this.detailsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
      this.introductionViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 5);
      this.loginViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 6);
      this.mainCategoryViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 7);
      this.orderViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 8);
      this.profileViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 9);
      this.registerViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 10);
      this.userAccountViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 11);
      this.userBookedViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 12);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return ImmutableMap.<String, Provider<ViewModel>>builderWithExpectedSize(13).put("com.example.kelineyt.viewmodel.AddressViewModel", (Provider) addressViewModelProvider).put("com.example.kelineyt.viewmodel.AllOrdersViewModel", (Provider) allOrdersViewModelProvider).put("com.example.kelineyt.viewmodel.BillingViewModel", (Provider) billingViewModelProvider).put("com.example.kelineyt.viewmodel.CartViewModel", (Provider) cartViewModelProvider).put("com.example.kelineyt.viewmodel.DetailsViewModel", (Provider) detailsViewModelProvider).put("com.example.kelineyt.viewmodel.IntroductionViewModel", (Provider) introductionViewModelProvider).put("com.example.kelineyt.viewmodel.LoginViewModel", (Provider) loginViewModelProvider).put("com.example.kelineyt.viewmodel.MainCategoryViewModel", (Provider) mainCategoryViewModelProvider).put("com.example.kelineyt.viewmodel.OrderViewModel", (Provider) orderViewModelProvider).put("com.example.kelineyt.viewmodel.ProfileViewModel", (Provider) profileViewModelProvider).put("com.example.kelineyt.viewmodel.RegisterViewModel", (Provider) registerViewModelProvider).put("com.example.kelineyt.viewmodel.UserAccountViewModel", (Provider) userAccountViewModelProvider).put("com.example.kelineyt.viewmodel.UserBookedViewModel", (Provider) userBookedViewModelProvider).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerThriftApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.kelineyt.viewmodel.AddressViewModel 
          return (T) new AddressViewModel(singletonC.provideFirebaseFirestoreDatabaseProvider.get(), singletonC.provideFirebaseAuthProvider.get());

          case 1: // com.example.kelineyt.viewmodel.AllOrdersViewModel 
          return (T) new AllOrdersViewModel(singletonC.provideFirebaseFirestoreDatabaseProvider.get(), singletonC.provideFirebaseAuthProvider.get());

          case 2: // com.example.kelineyt.viewmodel.BillingViewModel 
          return (T) new BillingViewModel(singletonC.provideFirebaseFirestoreDatabaseProvider.get(), singletonC.provideFirebaseAuthProvider.get());

          case 3: // com.example.kelineyt.viewmodel.CartViewModel 
          return (T) new CartViewModel(singletonC.provideFirebaseFirestoreDatabaseProvider.get(), singletonC.provideFirebaseAuthProvider.get(), singletonC.provideFirebaseCommonProvider.get());

          case 4: // com.example.kelineyt.viewmodel.DetailsViewModel 
          return (T) new DetailsViewModel(singletonC.provideFirebaseFirestoreDatabaseProvider.get(), singletonC.provideFirebaseAuthProvider.get(), singletonC.provideFirebaseCommonProvider.get());

          case 5: // com.example.kelineyt.viewmodel.IntroductionViewModel 
          return (T) new IntroductionViewModel(singletonC.sharedPreferences(), singletonC.provideFirebaseAuthProvider.get());

          case 6: // com.example.kelineyt.viewmodel.LoginViewModel 
          return (T) new LoginViewModel(singletonC.provideFirebaseAuthProvider.get());

          case 7: // com.example.kelineyt.viewmodel.MainCategoryViewModel 
          return (T) new MainCategoryViewModel(singletonC.provideFirebaseFirestoreDatabaseProvider.get());

          case 8: // com.example.kelineyt.viewmodel.OrderViewModel 
          return (T) new OrderViewModel(singletonC.provideFirebaseFirestoreDatabaseProvider.get(), singletonC.provideFirebaseAuthProvider.get());

          case 9: // com.example.kelineyt.viewmodel.ProfileViewModel 
          return (T) new ProfileViewModel(singletonC.provideFirebaseFirestoreDatabaseProvider.get(), singletonC.provideFirebaseAuthProvider.get());

          case 10: // com.example.kelineyt.viewmodel.RegisterViewModel 
          return (T) new RegisterViewModel(singletonC.provideFirebaseAuthProvider.get(), singletonC.provideFirebaseFirestoreDatabaseProvider.get());

          case 11: // com.example.kelineyt.viewmodel.UserAccountViewModel 
          return (T) new UserAccountViewModel(singletonC.provideFirebaseFirestoreDatabaseProvider.get(), singletonC.provideFirebaseAuthProvider.get(), singletonC.provideStorageProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule));

          case 12: // com.example.kelineyt.viewmodel.UserBookedViewModel 
          return (T) new UserBookedViewModel(singletonC.provideFirebaseFirestoreDatabaseProvider.get(), singletonC.provideFirebaseAuthProvider.get(), singletonC.provideFirebaseCommonProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends ThriftApplication_HiltComponents.ActivityRetainedC {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerThriftApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerThriftApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends ThriftApplication_HiltComponents.ServiceC {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerThriftApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerThriftApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerThriftApplication_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.google.firebase.firestore.FirebaseFirestore 
        return (T) AppModule_ProvideFirebaseFirestoreDatabaseFactory.provideFirebaseFirestoreDatabase();

        case 1: // com.google.firebase.auth.FirebaseAuth 
        return (T) AppModule_ProvideFirebaseAuthFactory.provideFirebaseAuth();

        case 2: // com.example.kelineyt.firebase.FirebaseCommon 
        return (T) AppModule_ProvideFirebaseCommonFactory.provideFirebaseCommon(singletonC.provideFirebaseAuthProvider.get(), singletonC.provideFirebaseFirestoreDatabaseProvider.get());

        case 3: // com.google.firebase.storage.StorageReference 
        return (T) AppModule_ProvideStorageFactory.provideStorage();

        default: throw new AssertionError(id);
      }
    }
  }
}
