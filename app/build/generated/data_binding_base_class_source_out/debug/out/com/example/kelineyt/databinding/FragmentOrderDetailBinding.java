// Generated by view binder compiler. Do not edit!
package com.example.kelineyt.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.core.widget.NestedScrollView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.kelineyt.R;
import com.shuhart.stepview.StepView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentOrderDetailBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final Guideline guideline1;

  @NonNull
  public final Guideline guideline2;

  @NonNull
  public final ImageView imageCloseOrder;

  @NonNull
  public final View line1;

  @NonNull
  public final ConstraintLayout linear;

  @NonNull
  public final LinearLayout linearAddress;

  @NonNull
  public final LinearLayout linearStepView;

  @NonNull
  public final RecyclerView rvProducts;

  @NonNull
  public final StepView stepView;

  @NonNull
  public final Toolbar toolbarOrderDetails;

  @NonNull
  public final TextView tvAddress;

  @NonNull
  public final TextView tvFullName;

  @NonNull
  public final TextView tvOrderId;

  @NonNull
  public final TextView tvPhoneNumber;

  @NonNull
  public final TextView tvProducts;

  @NonNull
  public final TextView tvShippingAddress;

  @NonNull
  public final TextView tvTotalPrice;

  private FragmentOrderDetailBinding(@NonNull NestedScrollView rootView,
      @NonNull Guideline guideline1, @NonNull Guideline guideline2,
      @NonNull ImageView imageCloseOrder, @NonNull View line1, @NonNull ConstraintLayout linear,
      @NonNull LinearLayout linearAddress, @NonNull LinearLayout linearStepView,
      @NonNull RecyclerView rvProducts, @NonNull StepView stepView,
      @NonNull Toolbar toolbarOrderDetails, @NonNull TextView tvAddress,
      @NonNull TextView tvFullName, @NonNull TextView tvOrderId, @NonNull TextView tvPhoneNumber,
      @NonNull TextView tvProducts, @NonNull TextView tvShippingAddress,
      @NonNull TextView tvTotalPrice) {
    this.rootView = rootView;
    this.guideline1 = guideline1;
    this.guideline2 = guideline2;
    this.imageCloseOrder = imageCloseOrder;
    this.line1 = line1;
    this.linear = linear;
    this.linearAddress = linearAddress;
    this.linearStepView = linearStepView;
    this.rvProducts = rvProducts;
    this.stepView = stepView;
    this.toolbarOrderDetails = toolbarOrderDetails;
    this.tvAddress = tvAddress;
    this.tvFullName = tvFullName;
    this.tvOrderId = tvOrderId;
    this.tvPhoneNumber = tvPhoneNumber;
    this.tvProducts = tvProducts;
    this.tvShippingAddress = tvShippingAddress;
    this.tvTotalPrice = tvTotalPrice;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentOrderDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentOrderDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_order_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentOrderDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.guideline1;
      Guideline guideline1 = ViewBindings.findChildViewById(rootView, id);
      if (guideline1 == null) {
        break missingId;
      }

      id = R.id.guideline2;
      Guideline guideline2 = ViewBindings.findChildViewById(rootView, id);
      if (guideline2 == null) {
        break missingId;
      }

      id = R.id.imageCloseOrder;
      ImageView imageCloseOrder = ViewBindings.findChildViewById(rootView, id);
      if (imageCloseOrder == null) {
        break missingId;
      }

      id = R.id.line1;
      View line1 = ViewBindings.findChildViewById(rootView, id);
      if (line1 == null) {
        break missingId;
      }

      id = R.id.linear;
      ConstraintLayout linear = ViewBindings.findChildViewById(rootView, id);
      if (linear == null) {
        break missingId;
      }

      id = R.id.linearAddress;
      LinearLayout linearAddress = ViewBindings.findChildViewById(rootView, id);
      if (linearAddress == null) {
        break missingId;
      }

      id = R.id.linearStepView;
      LinearLayout linearStepView = ViewBindings.findChildViewById(rootView, id);
      if (linearStepView == null) {
        break missingId;
      }

      id = R.id.rvProducts;
      RecyclerView rvProducts = ViewBindings.findChildViewById(rootView, id);
      if (rvProducts == null) {
        break missingId;
      }

      id = R.id.stepView;
      StepView stepView = ViewBindings.findChildViewById(rootView, id);
      if (stepView == null) {
        break missingId;
      }

      id = R.id.toolbarOrderDetails;
      Toolbar toolbarOrderDetails = ViewBindings.findChildViewById(rootView, id);
      if (toolbarOrderDetails == null) {
        break missingId;
      }

      id = R.id.tvAddress;
      TextView tvAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvAddress == null) {
        break missingId;
      }

      id = R.id.tvFullName;
      TextView tvFullName = ViewBindings.findChildViewById(rootView, id);
      if (tvFullName == null) {
        break missingId;
      }

      id = R.id.tvOrderId;
      TextView tvOrderId = ViewBindings.findChildViewById(rootView, id);
      if (tvOrderId == null) {
        break missingId;
      }

      id = R.id.tvPhoneNumber;
      TextView tvPhoneNumber = ViewBindings.findChildViewById(rootView, id);
      if (tvPhoneNumber == null) {
        break missingId;
      }

      id = R.id.tvProducts;
      TextView tvProducts = ViewBindings.findChildViewById(rootView, id);
      if (tvProducts == null) {
        break missingId;
      }

      id = R.id.tvShippingAddress;
      TextView tvShippingAddress = ViewBindings.findChildViewById(rootView, id);
      if (tvShippingAddress == null) {
        break missingId;
      }

      id = R.id.tvTotalPrice;
      TextView tvTotalPrice = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalPrice == null) {
        break missingId;
      }

      return new FragmentOrderDetailBinding((NestedScrollView) rootView, guideline1, guideline2,
          imageCloseOrder, line1, linear, linearAddress, linearStepView, rvProducts, stepView,
          toolbarOrderDetails, tvAddress, tvFullName, tvOrderId, tvPhoneNumber, tvProducts,
          tvShippingAddress, tvTotalPrice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
