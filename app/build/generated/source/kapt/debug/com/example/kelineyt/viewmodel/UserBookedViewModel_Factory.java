// Generated by Dagger (https://dagger.dev).
package com.example.kelineyt.viewmodel;

import com.example.kelineyt.firebase.FirebaseCommon;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserBookedViewModel_Factory implements Factory<UserBookedViewModel> {
  private final Provider<FirebaseFirestore> firestoreProvider;

  private final Provider<FirebaseAuth> authProvider;

  private final Provider<FirebaseCommon> firebaseCommonProvider;

  public UserBookedViewModel_Factory(Provider<FirebaseFirestore> firestoreProvider,
      Provider<FirebaseAuth> authProvider, Provider<FirebaseCommon> firebaseCommonProvider) {
    this.firestoreProvider = firestoreProvider;
    this.authProvider = authProvider;
    this.firebaseCommonProvider = firebaseCommonProvider;
  }

  @Override
  public UserBookedViewModel get() {
    return newInstance(firestoreProvider.get(), authProvider.get(), firebaseCommonProvider.get());
  }

  public static UserBookedViewModel_Factory create(Provider<FirebaseFirestore> firestoreProvider,
      Provider<FirebaseAuth> authProvider, Provider<FirebaseCommon> firebaseCommonProvider) {
    return new UserBookedViewModel_Factory(firestoreProvider, authProvider, firebaseCommonProvider);
  }

  public static UserBookedViewModel newInstance(FirebaseFirestore firestore, FirebaseAuth auth,
      FirebaseCommon firebaseCommon) {
    return new UserBookedViewModel(firestore, auth, firebaseCommon);
  }
}
