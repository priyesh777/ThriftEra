// Generated by Dagger (https://dagger.dev).
package com.example.kelineyt.di;

import com.example.kelineyt.firebase.FirebaseCommon;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideFirebaseCommonFactory implements Factory<FirebaseCommon> {
  private final Provider<FirebaseAuth> firebaseAuthProvider;

  private final Provider<FirebaseFirestore> firestoreProvider;

  public AppModule_ProvideFirebaseCommonFactory(Provider<FirebaseAuth> firebaseAuthProvider,
      Provider<FirebaseFirestore> firestoreProvider) {
    this.firebaseAuthProvider = firebaseAuthProvider;
    this.firestoreProvider = firestoreProvider;
  }

  @Override
  public FirebaseCommon get() {
    return provideFirebaseCommon(firebaseAuthProvider.get(), firestoreProvider.get());
  }

  public static AppModule_ProvideFirebaseCommonFactory create(
      Provider<FirebaseAuth> firebaseAuthProvider, Provider<FirebaseFirestore> firestoreProvider) {
    return new AppModule_ProvideFirebaseCommonFactory(firebaseAuthProvider, firestoreProvider);
  }

  public static FirebaseCommon provideFirebaseCommon(FirebaseAuth firebaseAuth,
      FirebaseFirestore firestore) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideFirebaseCommon(firebaseAuth, firestore));
  }
}
