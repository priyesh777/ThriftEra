// Generated by Dagger (https://dagger.dev).
package com.example.kelineyt.viewmodel;

import android.app.Application;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.storage.StorageReference;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserAccountViewModel_Factory implements Factory<UserAccountViewModel> {
  private final Provider<FirebaseFirestore> firestoreProvider;

  private final Provider<FirebaseAuth> authProvider;

  private final Provider<StorageReference> storageProvider;

  private final Provider<Application> appProvider;

  public UserAccountViewModel_Factory(Provider<FirebaseFirestore> firestoreProvider,
      Provider<FirebaseAuth> authProvider, Provider<StorageReference> storageProvider,
      Provider<Application> appProvider) {
    this.firestoreProvider = firestoreProvider;
    this.authProvider = authProvider;
    this.storageProvider = storageProvider;
    this.appProvider = appProvider;
  }

  @Override
  public UserAccountViewModel get() {
    return newInstance(firestoreProvider.get(), authProvider.get(), storageProvider.get(), appProvider.get());
  }

  public static UserAccountViewModel_Factory create(Provider<FirebaseFirestore> firestoreProvider,
      Provider<FirebaseAuth> authProvider, Provider<StorageReference> storageProvider,
      Provider<Application> appProvider) {
    return new UserAccountViewModel_Factory(firestoreProvider, authProvider, storageProvider, appProvider);
  }

  public static UserAccountViewModel newInstance(FirebaseFirestore firestore, FirebaseAuth auth,
      StorageReference storage, Application app) {
    return new UserAccountViewModel(firestore, auth, storage, app);
  }
}
